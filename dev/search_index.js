var documenterSearchIndex = {"docs":
[{"location":"registry/#miskatonic","page":"Setting Up Company Registry","title":"Setup Miskatonic Registry","text":"","category":"section"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Why Miskatonic? Miskatonic refers to the fiction Miskatonic university.","category":"page"},{"location":"registry/#Github-authentication","page":"Setting Up Company Registry","title":"Github authentication","text":"","category":"section"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"In order for the Julia package manager to access this private registry, it will need to be able to authenticate with Github.","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Username-password authentication for git operations  has been deprecated:","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"passwords are not accepted if two-factor auth is enabled for a user's account\nbeginning on August 13, 2021 passwords will not be accepted for any git operations","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Anyone who wishes to use this registry should generate a personal access token and use it to add the registry to Julia:","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"configure git to cache your credentials; refer to apporopriate OS-specific instructions\ngenerate a personal access token; at a minimum, select the repo scope, and copy/paste the token into a scratch file\ngit clone a private repository from github with a HTTPS URL; when prompted to enter a password, paste the generated token","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"The last step will trigger caching of the token. The git library used by the Julia package manager should be able to access this cache.","category":"page"},{"location":"registry/#Add-the-Miskatonic-Registry","page":"Setting Up Company Registry","title":"Add the Miskatonic Registry","text":"","category":"section"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Please <a href=\"https://docs.julialang.org/en/v1/manual/getting-started/\">open Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode.","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"registry add https://github.com/Happy-Diode/Miskatonic.git","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"If you followed the Github authentication steps above to cache the personal access token, this should add the registry without prompting for a username and password.","category":"page"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Please ask for help on Slack if you encounter errors.","category":"page"},{"location":"registry/#How-to-register","page":"Setting Up Company Registry","title":"How to register","text":"","category":"section"},{"location":"registry/","page":"Setting Up Company Registry","title":"Setting Up Company Registry","text":"Currently, we don't have automatic bot configured yet. One should ping @Roger-luo to tag a new version and register the repo.","category":"page"},{"location":"ref/#References","page":"References","title":"References","text":"","category":"section"},{"location":"ref/#EaRyd","page":"References","title":"EaRyd","text":"","category":"section"},{"location":"ref/","page":"References","title":"References","text":"Modules = [EaRyd]","category":"page"},{"location":"ref/#RydbergEmulator","page":"References","title":"RydbergEmulator","text":"","category":"section"},{"location":"ref/","page":"References","title":"References","text":"Modules = [RydbergEmulator]","category":"page"},{"location":"ref/#RydbergEmulator.fullspace","page":"References","title":"RydbergEmulator.fullspace","text":"fullspace\n\nA constant for the FullSpace.\n\n\n\n\n\n","category":"constant"},{"location":"ref/#RydbergEmulator.AbstractAtom","page":"References","title":"RydbergEmulator.AbstractAtom","text":"AbstractAtom\n\nAbstract type for atoms.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.AbstractSpace","page":"References","title":"RydbergEmulator.AbstractSpace","text":"AbstractSpace\n\nAbstract type for spaces.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.AbstractTerm","page":"References","title":"RydbergEmulator.AbstractTerm","text":"AbstractTerm\n\nAbstract term for hamiltonian terms.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.Atom2D","page":"References","title":"RydbergEmulator.Atom2D","text":"Atom2D{T} = RydAtom{2,T}\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.FullSpace","page":"References","title":"RydbergEmulator.FullSpace","text":"FullSpace <: AbstractSpace\n\nA trait for the full space.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.KrylovEmulationCache","page":"References","title":"RydbergEmulator.KrylovEmulationCache","text":"KrylovEmulationCache{C}\n\nCache type for the discrete emulation, type variable C is the actual matrix type for the hamiltonian storage.\n\nWhen we do Krylov subspace based time evolution emulation with a sequence of hamiltonians of similar terms, e.g all the hamiltonians are RydInteract + XTerm + ZTerm, the sparse structure will be the same, thus we can re-use the sparse matrix generated for the first hamiltonian again via update_term! in the following calculation to reduce the memory usage and speed up the emulation.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.KrylovEmulationCache-Union{Tuple{Ti}, Tuple{Tv}, Tuple{RydbergEmulator.AbstractTerm, RydbergEmulator.AbstractSpace}} where {Tv, Ti}","page":"References","title":"RydbergEmulator.KrylovEmulationCache","text":"KrylovEmulationCache{Tv, Ti}(hs[, s::AbstractSpace=fullspace])\n\nCreate a KrylovEmulationCache.\n\nArguments\n\nT: element type of the storage.\nhs: a Hamiltonian expression term or a list of Hamiltonians.\ns: space type, default is fullspace.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.KrylovEvolution-Union{Tuple{P}, Tuple{AbstractRegister, Vector{<:Real}, Vector{<:RydbergEmulator.AbstractTerm}}} where P","page":"References","title":"RydbergEmulator.KrylovEvolution","text":"KrylovEvolution{P}(register, durations, hs; kw...)\n\nCreate a KrylovEvolution object that emulates a list of hamiltonians at discrete time steps using Krylov subspace method, or trotterize a continuous function with dt then run the trotterize integrator on it.\n\nArguments\n\nP: optional, a type parameter that sets the problem precision type, default is   the same as the Yao.datatype of given register.\nregister: required, the evolution problem register, can be a RydbergReg or an ArrayReg   from Yao.\ndurations: required, the evolution durations of each hamiltonian, should be a list of real numbers.\nhs: required, the evolution hamiltonian, a list of hamiltonians with constant parameters.\n\nKeyword Arguments\n\ncache: discrete solver cache, see also KrylovEmulationCache.\nnormalize_step::Int: run normalization per normalize_step, default is 5.\nnormalize_finally::Bool: normalize the state after the entire emulation ends, default is true.\nprogress::Bool: show progress bar, default is false.\nprogress_step::Int: update the progress bar per progress_step, default is 1.\nprogress_name::String: the printed name on progress bar, default is \"emulating\".\ndt::Real: the time step of trotterization if ts is specified as   a Real number and hs is a time dependent hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.NTerm","page":"References","title":"RydbergEmulator.NTerm","text":"NTerm{Delta} <: AbstractTerm\nNTerm(nsites, Δs::Delta)\n\nType for N term\n\nExpression\n\nsum_i Δ_i n_i\n\nParameters\n\nΔs: the detuning parameter, the default unit is MHz.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.NTerm-Tuple{AbstractVector}","page":"References","title":"RydbergEmulator.NTerm","text":"NTerm(Δs::AbstractVector)\n\nCreate a simple NTerm from given Δs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.RydAtom","page":"References","title":"RydbergEmulator.RydAtom","text":"RydAtom{N,T} <: AbstractAtom\n\nPosition of one Rydberg atom.\n\nRydAtom(locs::NTuple{N, T})\n\nCreate a position of one Rydberg atom. The default unit is μm.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.RydAtom-Tuple","page":"References","title":"RydbergEmulator.RydAtom","text":"RydAtom(locations...)\n\nCreate a RydAtom from given locations.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.RydAtom-Tuple{AbstractVector}","page":"References","title":"RydbergEmulator.RydAtom","text":"RydAtom(locations::Vector)\n\nCreate a RydAtom from given list of locations.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.RydInteract","page":"References","title":"RydbergEmulator.RydInteract","text":"RydInteract{T<:Number, AtomList <: AbstractVector{<:RydAtom}} <: AbstractTerm\nRydInteract(atoms::AbstractVector{<:RydAtom}, C::Number)\n\nType for Rydberg interactive term.\n\nExpression\n\nsum_i j fracCr_i - r_j^6 n_i n_j\n\nParameters\n\natoms: a list of atom positions, must be type RydAtom, default unit is μm.\nC: the interaction strength, default unit is MHz⋅μm^6. default value is 2π * 109.133 * MHz*µm^6.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.RydbergReg-Tuple{AbstractMatrix{<:Real}, Subspace}","page":"References","title":"RydbergEmulator.RydbergReg","text":"RydbergReg(state::AbstractMatrix, subspace::Subspace)\n\nCreate a RydbergReg from real value storage.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.RydbergReg-Union{Tuple{N}, Tuple{AbstractVector, Subspace}} where N","page":"References","title":"RydbergEmulator.RydbergReg","text":"RydbergReg(state::AbstractVector, subspace::Subspace)\n\nCreate a RydbergReg from state vector and its corresponding subspace of natoms.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.Subspace","page":"References","title":"RydbergEmulator.Subspace","text":"Subspace{S <: AbstractVector{Int}} <: AbstractSpace\n\nA Dict-like object stores the mapping between subspace and full space.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.Subspace-Tuple{Int64, AbstractVector{Int64}}","page":"References","title":"RydbergEmulator.Subspace","text":"Subspace(nqubits::Int, subspace_v::AbstractVector{Int})\n\nCreate a Subspace from given list of subspace indices in the corresponding full space.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.XTerm","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm{Omega, Phi} <: AbstractTerm\nXTerm(nsites::Int, Ωs::Omega, ϕs::Phi)\n\nType for X term.\n\nExpression\n\nsum_i Ω_i (e^iϕ_i 0_i1 + e^-iϕ_i1_i0)\n\nParameters\n\nΩ: rabi-frequency, the default unit for Ωs is MHz\nϕs phase, has no unit (or NoUnits in Unitful).\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.XTerm-Tuple{AbstractVector, AbstractVector}","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm(Ωs::AbstractVector, ϕs::AbstractVector)\n\nCreate the XTerm from given Ωs and ϕs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.XTerm-Tuple{AbstractVector, Any}","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm(Ωs::AbstractVector, ϕs::Number)\n\nCreate the XTerm from given Ωs and ϕs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.XTerm-Tuple{AbstractVector}","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm(n::Int, Ωs::AbstractVector)\n\nCreate a simple XTerm from given Ωs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.XTerm-Tuple{Any, AbstractVector}","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm(Ωs::Number, ϕs::AbstractVector)\n\nCreate the XTerm from given Ωs and ϕs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.XTerm-Tuple{Int64, Any}","page":"References","title":"RydbergEmulator.XTerm","text":"XTerm(n::Int, Ω::Number)\n\nCreate a simple XTerm from given number of atoms n and Ω.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.ZTerm","page":"References","title":"RydbergEmulator.ZTerm","text":"ZTerm{Delta} <: AbstractTerm\nZTerm(nsites, Δs::Delta)\n\nType for Z term.\n\nExpression\n\nsum_i Δ_iσ_i^z\n\nParameters\n\nΔs: the detuning parameter, the default unit is MHz.\n\n\n\n\n\n","category":"type"},{"location":"ref/#RydbergEmulator.ZTerm-Tuple{AbstractVector}","page":"References","title":"RydbergEmulator.ZTerm","text":"ZTerm(Δs::AbstractVector)\n\nCreate a simple ZTerm from given Δs.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.add_random_vertices","page":"References","title":"RydbergEmulator.add_random_vertices","text":"add_random_vertices([rng=GLOBAL_RNG], config::AbstractVector, graph::AbstractGraph, ntrials::Int = 10)\n\nAdd vertices randomly to given configuration for ntrials times and pick the one that has largest count_vertices.\n\nArguments\n\nrng: optional, Random Number Generator.\nconfig: configuration to tweak.\ngraph: problem graph.\nntrials: number of trials to use, default is 10.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.anyone-Union{Tuple{T}, Tuple{T, T}} where T<:Integer","page":"References","title":"RydbergEmulator.anyone","text":"anyone(index::Integer, mask::Integer) -> Bool\n\nReturn true if any masked position of index is 1.\n\nExample\n\ntrue if any masked positions is 1.\n\njulia> anyone(0b1011, 0b1001)\ntrue\njulia> anyone(0b1011, 0b1100)\ntrue\njulia> anyone(0b1011, 0b0100)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.blockade_subspace","page":"References","title":"RydbergEmulator.blockade_subspace","text":"blockade_subspace(atoms[, radius=1.0])\n\nCreate a blockade approximation subspace from given atom positions and radius.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.bmask","page":"References","title":"RydbergEmulator.bmask","text":"bmask(::Type{T}) where T <: Integer -> zero(T)\nbmask([T::Type], positions::Int...) -> T\nbmask([T::Type], range::UnitRange{Int}) -> T\n\nReturn an integer mask of type T where 1 is the position masked according to positions or range. Directly use T will return an empty mask 0.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.count_vertices-Tuple{Integer}","page":"References","title":"RydbergEmulator.count_vertices","text":"count_vertices(config::Integer)\n\ncounter the number of vertices in a spin configuration.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.create_subspace_from_mis-Tuple{Int64, AbstractVector}","page":"References","title":"RydbergEmulator.create_subspace_from_mis","text":"create_subspace_from_mis(n::Int, mis::AbstractVector)\n\nCreate Subspace from given list of maximal cliques/maximal independent set.\n\nArguments\n\nn: number of vertices of the graph.\nmis: the list of maximal independent set.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.distance-Tuple{RydAtom, RydAtom}","page":"References","title":"RydbergEmulator.distance","text":"distance(a::RydAtom, b::RydAtom)\n\nReturn the distance between two Rydberg atoms.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.emulate!","page":"References","title":"RydbergEmulator.emulate!","text":"emulate!(evolution)\n\nRun emulation on given evolution object. See also KrylovEvolution, or ContinousEvolution.\n\nArguments\n\nevolution: the evolution object.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.emulate_step!","page":"References","title":"RydbergEmulator.emulate_step!","text":"emulate_step!(prob::KrylovEvolution, step::Int=1)\n\nRun single step evolution at given step index for a discrete evolution (Krylov-based).\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.exact_solve_mis-Tuple{Graphs.AbstractGraph}","page":"References","title":"RydbergEmulator.exact_solve_mis","text":"exact_solve_mis(g::AbstractGraph)\n\nReturn the exact MIS size of a graph g.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.expmv-Union{Tuple{T}, Tuple{Number, Any, Vector{T}}} where T","page":"References","title":"RydbergEmulator.expmv","text":"expmv(t, A, vec; [tol], [m], [norm], [anorm])\n\nCalculate matrix exponential acting on some vector, w = e^tAv, using the Krylov subspace approximation. See R.B. Sidje, ACM Trans. Math. Softw., 24(1):130-156, 1998 and http://www.maths.uq.edu.au/expokit\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.getterm","page":"References","title":"RydbergEmulator.getterm","text":"getterm(terms, k, k_site)\n\nGet the value of k-th local term in terms given the site configuration as k_site.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.gibbs_loss-Tuple{Any, Real}","page":"References","title":"RydbergEmulator.gibbs_loss","text":"gibbs_loss([f], reg_or_samples, α::Real)\n\nThe Gibbs loss for maximum independent set defined as\n\nL = -1α log(langle ψexp(α sum(n))ψrangle)\n\nwhere n is the vertex set size.\n\nArguments\n\nf: optional, postprocessing callback function f(config) -> config.   The input config is an integer of type Int, the output   config can be a type supports count_vertices   e.g, an AbstractVector or an Integer.\nreg_or_samples can be a register (Yao.ArrayReg or RydbergReg)   or a list of measurement result (config) in AbstractVector.\nα::Real: the parameter of Gibbs loss.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.independent_set_probabilities","page":"References","title":"RydbergEmulator.independent_set_probabilities","text":"independent_set_probabilities([f], reg::Yao.AbstractRegister, graph_or_mis)\n\nCalculate the probabilities of independent sets with given postprocessing function f(config) -> config. The default postprocessing function f will only reduce all configurations to independent set.\n\nArguments\n\nf: optional, postprocessing function, default is to_independent_set.\nreg: required, the register object.\ngraph_or_mis: a problem graph or the MIS size of the problem   graph (can be calculated via exact_solve_mis).\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.independent_set_subspace-Tuple{Graphs.SimpleGraphs.SimpleGraph}","page":"References","title":"RydbergEmulator.independent_set_subspace","text":"independent_set_subspace(graph)\n\nCreate a subspace from given graph's maximal independent set.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.is_independent_set-Tuple{Any, Graphs.AbstractGraph}","page":"References","title":"RydbergEmulator.is_independent_set","text":"is_independent_set(config, graph::AbstractGraph)\n\nReturn true if config is an independent set of graph. config can be a BitStr, a vector, or any iterable.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.ismatch-Union{Tuple{T}, Tuple{T, T, T}} where T<:Integer","page":"References","title":"RydbergEmulator.ismatch","text":"ismatch(index::Integer, mask::Integer, target::Integer) -> Bool\n\nReturn true if bits at positions masked by mask equal to 1 are equal to target.\n\nExample\n\njulia> n = 0b11001; mask = 0b10100; target = 0b10000;\n\njulia> ismatch(n, mask, target)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.mean_rydberg","page":"References","title":"RydbergEmulator.mean_rydberg","text":"mean_rydberg([f], reg_or_samples)\n\nMean size of vertex set.\n\nArguments\n\nf: optional, postprocessing callback function f(config) -> config.   The input config is an integer of type Int, the output   config can be a type supports count_vertices   e.g, an AbstractVector or an Integer.\nreg_or_samples can be a register (Yao.ArrayReg or RydbergReg)   or a list of measurement result (config) in AbstractVector.\n\nExample\n\nTo implement the postprocessing protocal in MIS experiment:\n\ncalculating mean_rydberg by first reducing the configuration\n\nto independent set using to_independent_set\n\nrandomly adding vertices then pick the largest count_vertices\n\nusing add_random_vertices.\n\nmean_rydberg(r) do config\n    config = to_independent_set(config, graph)\n    add_random_vertices(config, graph, 10)\n    return config\nend\n\nOr one can also just add vertice by atom order\n\nmean_rydberg(r) do config\n    config = to_independent_set(config, graph)\n    add_vertices!(config, graph)\n    return config\nend\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.mis_postprocessing-Tuple{Any, Graphs.AbstractGraph}","page":"References","title":"RydbergEmulator.mis_postprocessing","text":"mis_postprocessing(config, graph::AbstractGraph; ntrials::Int=10)\n\nThe postprocessing protocal used in Harvard.\n\nArguments\n\nconfig: configuration to postprocess.\ngraph: the problem graph.\n\nKeyword Arguments\n\nntrials: number of trials to use.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.mis_postprocessing-Tuple{Graphs.AbstractGraph}","page":"References","title":"RydbergEmulator.mis_postprocessing","text":"mis_postprocessing(graph::AbstractGraph; ntrials::Int = 10)\n\nCurried version of mis_postprocessing.\n\nExample\n\nto calculate mean_rydberg loss with postprocessing used in Harvard experiment.\n\nmean_rydberg(mis_postprocessing(graph), reg)\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.nsites","page":"References","title":"RydbergEmulator.nsites","text":"nsites(term)\n\nReturn the number of sites of given Hamiltonian term.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.num_mis_violation-Tuple{Any, Graphs.AbstractGraph, Int64}","page":"References","title":"RydbergEmulator.num_mis_violation","text":"num_mis_violation(config, graph::AbstractGraph, i::Int)\n\nCalculate the number of MIS violations for i-th vertex in graph and configuration config. The config should be a subtype of AbstractVector.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.rand_atoms-Tuple{Int64, Float64}","page":"References","title":"RydbergEmulator.rand_atoms","text":"rand_atoms(n::Int, ρ::Float64; ndims::Int=2)\n\nCreate a random atom position of n atoms and with density ρ in ndims space. The size of the box is L^ndims, where the linear dimension L = (nρ)^(1ndims).\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.rand_unit_disk_graph-Tuple{Int64, Real}","page":"References","title":"RydbergEmulator.rand_unit_disk_graph","text":"rand_unit_disk_graph(natoms::Int, ρ::Real)\n\nGenerate a random disk graph.\n\nρ is defined as n/L^2, where L is the box size.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.read_atoms-Tuple{String, Vararg{Any}}","page":"References","title":"RydbergEmulator.read_atoms","text":"read_atoms(filename[, T=Int])\n\nRead atom positions from file filename.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.read_atoms-Union{Tuple{T}, Tuple{IO, Type{T}}} where T","page":"References","title":"RydbergEmulator.read_atoms","text":"read_atoms(io::IO[, T=Int])\n\nRead atom positions from stream io.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.read_subspace-Tuple{AbstractString}","page":"References","title":"RydbergEmulator.read_subspace","text":"read_subspace(filename::AbstractString)\n\nRead Subspace from a file filename.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.read_subspace-Tuple{IO}","page":"References","title":"RydbergEmulator.read_subspace","text":"read_subspace(io::IO)\n\nRead Subspace from given io.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.rydatoms-Tuple{AbstractMatrix}","page":"References","title":"RydbergEmulator.rydatoms","text":"rydatoms(::AbstractMatrix)\n\nCreate a list of RydAtoms from a nx2 location matrix.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.rydberg_h-NTuple{5, Any}","page":"References","title":"RydbergEmulator.rydberg_h","text":"rydberg_h(atoms, [C=2π * 109.133 * MHz*µm^6], Ω, ϕ, Δ)\n\nCreate a rydberg hamiltonian, shorthand for RydInteract(C, atoms) + XTerm(length(atoms), Ω, ϕ) + ZTerm(length(atoms), Δ)\n\n fracCr_i - r_j^6 n_i n_j + Ω σ_x - Δ σ_n\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.set_zero_state!","page":"References","title":"RydbergEmulator.set_zero_state!","text":"set_zero_state!(register)\n\nSet the given register to |00...00⟩.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.simple_rydberg-Tuple{Int64, Number}","page":"References","title":"RydbergEmulator.simple_rydberg","text":"simple_rydberg(n::Int, ϕ::Number)\n\nCreate a simple rydberg hamiltonian that has only XTerm.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.sort_atoms!-Tuple{Vector{<:RydAtom}}","page":"References","title":"RydbergEmulator.sort_atoms!","text":"sort_atoms!(atoms; by=nothing)\n\nSort a list of atom positions. Sort by coordinates if by is nothing.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.square_lattice-Tuple{Int64, Float64}","page":"References","title":"RydbergEmulator.square_lattice","text":"square_lattice(n::Int, ff::Float64)\n\nCreate a list of Rydberg atoms on a square lattice with given size n and filling factor ff.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.term_value","page":"References","title":"RydbergEmulator.term_value","text":"term_value(term, lhs, rhs, col, row)\n\nReturn the value of given term at H[col, row] with left basis lhs and right basis rhs. For full space, lhs = col - 1 and rhs = row - 1, for subspace, lhs = subspace_v[col] and rhs = subspace_v[row].\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.to_independent_set!-Tuple{AbstractVector, Graphs.AbstractGraph}","page":"References","title":"RydbergEmulator.to_independent_set!","text":"to_independent_set!(config::AbstractVector, graph::AbstractGraph)\n\nEliminate vertices in config so that remaining vertices do not have connected edges. This algorithm is a naive vertex elimination that does not nesesarily give the maximum possible vertex set.\n\n# run the following code in Atom/VSCode\natoms = RydAtom.([(0.0, 1.0), (1.0, 0.), (2.0, 0.0),\n    (1.0, 1.0), (1.0, 2.0), (2.0, 2.0)])\ngraph = unit_disk_graph(atoms, 1.5)\n\nconfig = [1, 1, 1, 0, 1, 1]\nviz_config(atoms, graph, config)\n\nto_independent_set!(config, graph)\nviz_config(atoms, graph, config)\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.trotterize-Tuple{Real, Real, RydbergEmulator.AbstractTerm}","page":"References","title":"RydbergEmulator.trotterize","text":"trotterize([start::Real=0], stop::Real, h::AbstractTerm; nsteps::Int=1000)\n\nTrotterize time evolution of hamiltonian h. Each trotterize step uses the first value of the interval as the clock to get h(t), e.g when start time is 0.1 and stop time is 0.5 with 1000 steps, the first value of h will be h(0.1), then h(0.1 + dt) and so on.\n\nArguments\n\nstart: start time, a real number, default is zero.\nstop: stop time, a real number.\nh: the hamiltonian expression.\n\nKeyword Arguments\n\nnsteps: number of steps in the evolution.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.unit_disk_graph","page":"References","title":"RydbergEmulator.unit_disk_graph","text":"unit_disk_graph(atoms::AbstractVector{<:RydAtom}, radius=1)\n\nCreate a unit disk graph from atom positions atoms. It returns a Graphs.SimpleGraph instance.\n\natoms is vector of atoms positions.\nradius is the unit in the unit disk graph definition.\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.update_term!","page":"References","title":"RydbergEmulator.update_term!","text":"update_term!(H, term[, space=fullspace])\n\nUpdate matrix H based on the given Hamiltonian term. This can be faster when the sparse structure of H is known (e.g H is a SparseMatrixCSC).\n\n\n\n\n\n","category":"function"},{"location":"ref/#RydbergEmulator.write_atoms-Tuple{IO, AbstractVector{<:RydAtom}}","page":"References","title":"RydbergEmulator.write_atoms","text":"write_atoms(io::IO, atoms::AbstractVector{<:RydAtom})\n\nWrite a list of atom positions to stream io.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.write_atoms-Tuple{String, AbstractVector{<:RydAtom}}","page":"References","title":"RydbergEmulator.write_atoms","text":"write_atoms(filename::String, atoms::AbstractVector{<:RydAtom})\n\nWrite a list of atom positions to the file given by filename.\n\nExample\n\nThis saves the atom position generated from square_lattice to a file demo.atoms.\n\natoms = square_lattice(5, 0.8)\nwrite_atoms(\"demo.atoms\", atoms)\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.write_subspace-Tuple{AbstractString, Subspace}","page":"References","title":"RydbergEmulator.write_subspace","text":"write_subspace(filename::AbstractString, s::Subspace)\n\nWrite Subspace to filename as human readable format.\n\n\n\n\n\n","category":"method"},{"location":"ref/#RydbergEmulator.write_subspace-Tuple{IO, Subspace}","page":"References","title":"RydbergEmulator.write_subspace","text":"write_subspace(io::IO, s::Subspace)\n\nWrite Subspace object s to IO as human readable format.\n\n\n\n\n\n","category":"method"},{"location":"ref/#YaoArrayRegister.zero_state","page":"References","title":"YaoArrayRegister.zero_state","text":"zero_state([T=ComplexF64], n::Int, subspace[, layout=ComplexLayout()])\n\nCreate a RydbergReg in zero state in given subspace.\n\nArguments\n\nT: optional, element type, default is ComplexF64.\nn: required, number of atoms (qubits).\nsubspace: required, the subspace of rydberg state.\nlayout: optional, memory layout, default is ComplexLayout.\n\nMemory Layout\n\nWhen the hamiltonian is a real hermitian, it can be more efficient to use the RealLayout over ComplexLayout which stores the complex -value state vector as as length(state)×2 matrix, the first column is the real component and the second column is the imaginary component.\n\n\n\n\n\n","category":"function"},{"location":"ref/#ContinuousEmulator","page":"References","title":"ContinuousEmulator","text":"","category":"section"},{"location":"ref/","page":"References","title":"References","text":"Modules = [ContinuousEmulator]","category":"page"},{"location":"ref/#ContinuousEmulator.ODEEvolution","page":"References","title":"ContinuousEmulator.ODEEvolution","text":"ODEEvolution{P}\n\nProblem type for hamiltonian with time dependent parameters.\n\n\n\n\n\n","category":"type"},{"location":"ref/#ContinuousEmulator.ODEEvolution-Union{Tuple{P}, Tuple{AbstractRegister, Real, RydbergEmulator.AbstractTerm}} where P","page":"References","title":"ContinuousEmulator.ODEEvolution","text":"ODEEvolution{P}(r::AbstractRegister, t::Real, h::AbstractTerm; kw...)\n\nRun the evolution for t μs, start from clock 0 μs, shorthand for\n\nODEEvolution{P}(r, (0, t), h; kw...)\n\n\n\n\n\n","category":"method"},{"location":"ref/#ContinuousEmulator.ODEEvolution-Union{Tuple{P}, Tuple{AbstractRegister, Tuple{Real, Real}, RydbergEmulator.AbstractTerm}} where P","page":"References","title":"ContinuousEmulator.ODEEvolution","text":"ODEEvolution{P}(r::AbstractRegister, (start, stop), h::AbstractTerm; kw...) where {P <: AbstractFloat}\n\nCreate a ODEEvolution that defines the evolution of a hamiltonian h with time dependent parameters to evolve from start to stop using an ODE solver.\n\nArguments\n\nP: optional, a type parameter that sets the problem precision type, default is   the same as the Yao.datatype of given register.\nregister: required, the evolution problem register, can be a RydbergReg or an ArrayReg   from Yao.\n(start, stop): required, the evolution interval.\nh: required, the evolution hamiltonian.\n\nKeyword Arguments\n\nalgo: algorithm to use, default is Vern8, check DiffEq documentation for more details.\nprogress: print progress bar or not, this may effect the performance when problem scale is small, default is true.\nprogress_steps: steps to update the progress bar, default is 5.\nreltol: relative tolerance, default is 1e-8.\nabstol: absolute tolerance, default is 1e-8.\nnormalize_steps: steps to run normalization on the state, default is 5.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = EaRyd","category":"page"},{"location":"#EaRyd","page":"Home","title":"EaRyd","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Coverage Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the QuEra Emulator for Rydberg System documentation page!","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p>\nEaRyd is a &nbsp;\n    <a href=\"https://julialang.org\">\n        <img src=\"https://raw.githubusercontent.com/JuliaLang/julia-logo-graphics/master/images/julia.ico\" width=\"16em\">\n        Julia Language\n    </a>\n    &nbsp; package. To install EaRyd,\n    please <a href=\"https://docs.julialang.org/en/v1/manual/getting-started/\">open\n    Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then type the following command\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"First add the QuEra Julia registry via","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> registry add https://github.com/Happy-Diode/Miskatonic.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"For stable release","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add EaRyd","category":"page"},{"location":"","page":"Home","title":"Home","text":"For current master","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add EaRyd#master","category":"page"},{"location":"#Don't-know-how-to-setup-the-registry?","page":"Home","title":"Don't know how to setup the registry?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check Setting Up Company Registry.","category":"page"},{"location":"#Looking-for-Help?","page":"Home","title":"Looking for Help?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"check the slack channel #julia\nif not urgent, ask questions in discussions","category":"page"},{"location":"#Have-Suggestions-or-Interested-in-Contribution?","page":"Home","title":"Have Suggestions or Interested in Contribution?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"check the slack channel #q-emulator for meetings and discussions\nfile an issue to report a bug or request a feature","category":"page"},{"location":"quick-start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick-start/#Create-a-Register","page":"Quick Start","title":"Create a Register","text":"","category":"section"},{"location":"quick-start/#Create-a-Hamiltonian","page":"Quick Start","title":"Create a Hamiltonian","text":"","category":"section"},{"location":"quick-start/#Define-Atom-Positions","page":"Quick Start","title":"Define Atom Positions","text":"","category":"section"},{"location":"quick-start/#Run-emulation","page":"Quick Start","title":"Run emulation","text":"","category":"section"},{"location":"julia/#The-Julia-Programming-Language","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"The EaRyd project is built in pure Julia programming language. Thus if you are not familiar with Julia, here is a quick start for basic Julia gramar, and a guide for learning more detailed and advanced Julia.","category":"page"},{"location":"julia/#Why-Julia?","page":"The Julia Programming Language","title":"Why Julia?","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Fast, as you might have heard about it, Julia is very fast, there are various benchmarks online.   It can even be used to write Basic Linear Algebra Subroutine (BLAS) to reach performance on par with   manually optimized assembly with C (check Octavian).\nGeneric, the language itself and its ecosystem are built to be generic, and the compiler can specialize   on generic methods automatically, thus you will find a lot things can be combined easily, and they will   just work, e.g plugin the Measurement number from    Measurement.jl into your ODE solver, you will get error propagation just work, plugin Tropical number into tensor contraction function, you can   solve optimization problems with tensor networks, and so on.\nDifferentiable, the language is differentiable, that means you can calculate the derivatives   using an automatic differentiation engine on the whole language. The current stable AD engine   is powered by Zygote, the next generation AD engine includes   Diffractor (check the video talk on ACM SIGPLAN),   Enzyme.\nExtensible, the language is designed to be compiler friendly, it supports staged programming   as well as compiler plugins. This makes supporting new hardware much easier. As a result, Julia   can support multiple different hardware, such as CUDA,   oneAPI, TPU and so on.\nEasy, with all these features, yet the language itself stays rather easy to learn. Let's go to   the quick start section to skim the syntax.","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"info: Info\nMulti-stage programming (MSP) is a variety of metaprogramming in which compilation is divided into a series of intermediate phases, allowing typesafe run-time code generation. Statically defined types are used to verify that dynamically constructed types are valid and do not violate the type system. – Wikipedia","category":"page"},{"location":"julia/#Quick-Start","page":"The Julia Programming Language","title":"Quick Start","text":"","category":"section"},{"location":"julia/#Variables-and-Some-Basic-Types","page":"The Julia Programming Language","title":"Variables and Some Basic Types","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, you can define a variable similar to how you define it in Python, e.g we can define a x using = (assignment)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"x = 1","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"every variable has a type, you can check it using typeof","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"typeof(x)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"By default Julia displays the output of the last operation. (You can suppress the output by adding ; (a semicolon) at the end.)","category":"page"},{"location":"julia/#Functions","page":"The Julia Programming Language","title":"Functions","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, you can also define short-form, one-line functions using = (assignment) similar to how you write things mathematically.","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"f(x) = 2x","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Typing the function's name gives information about the function. To call it we must use parentheses:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"f\nf(2)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"For longer functions we use the following syntax with the function keyword and end:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"function g(x, y)\n\tz = x + y\n\treturn z^2\nend","category":"page"},{"location":"julia/#Control-Flows","page":"The Julia Programming Language","title":"Control Flows","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"In Julia, there are for, if and while, they look like the following","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"s = 0\nfor i in 1:10\n    s += 1\nend","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"we can now check the value of s by typing it again","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"s","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Here, 1:10 is a range representing the numbers from 1 to 10:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"typeof(1:10)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"the if else statement looks like the following","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"if s < 10\n\t# do something\nelseif 10 < s < 13\n\t# do something\nelse\n\t# do something\nend","category":"page"},{"location":"julia/#Matrix-and-Array","page":"The Julia Programming Language","title":"Matrix and Array","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Julia carries its own Array type, if you use Python, it is similar to numpy.array in Python except:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"index starts from 1\nthe multi-dimensional index is column-wise","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"You can also have list comprehension:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"[i for i in 1:10]","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"it works for multi-dimensional case too:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"[(i, j) for i in 1:10, j in 1:5]","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"most functions follow the same convention as numpy or MATLAB, e.g you can create a random matrix using:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"rand(5, 5)","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"if you have question about using a function, you can always type question mark ? in your REPL following the function name","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> ?rand","category":"page"},{"location":"julia/#Package-Manager-and-Environments","page":"The Julia Programming Language","title":"Package Manager & Environments","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"Julia carries its own package manager, you can use it as a normal package:","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> using Pkg","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"to install a pacakge, you can use","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> Pkg.add(\"Yao\")","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"to remove a pacakge, you can use","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"julia> Pkg.rm(\"Yao\")","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"All Julia program runs inside an environment, it is the global environment by default. It is usually recommended to run your notebook in a local environment, so we won't hit any version conflicts between different packages. ","category":"page"},{"location":"julia/#Resources","page":"The Julia Programming Language","title":"Resources","text":"","category":"section"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"For more resources just check the official website julialang.org/learning","category":"page"},{"location":"julia/","page":"The Julia Programming Language","title":"The Julia Programming Language","text":"<style>\n  iframe {\n    width: 1px;\n    min-width: 100%;\n    min-height: 1000px;\n  }\n</style>\n<iframe id=\"myIframe\" src=\"https://julialang.org/learning/\"></iframe>\n<script>\n  iFrameResize({ log: true }, '#myIframe')\n</script>","category":"page"}]
}
